---
title: "Opinion di pueblo"
output: html_notebook
---


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(Rmisc)
library(sf)
library(treemap)
library(waffle)
library(ggmap)
```

```{r}
df <- read.csv("C:/Users/Rendell CE/OneDrive - Cornerstone Economics/Lovely Data/Opinion di pueblo/Responses - Opinion di pueblo - 23 November 2024.csv", stringsAsFactors=TRUE)

# Rename specific columns
colnames(df)[24:34] <- paste0("rating_", 1:11)
colnames(df)[1] <- "Eligible"

# Filter out rows where 'Eligible' is "No"
df_filtered <- df %>%
  dplyr::filter(Eligible != "No")

# Group and filter based on IP address response limits
df_filtered <- df_filtered %>%
  group_by(IP.Address) %>%
  dplyr::mutate(response_count = dplyr::row_number()) %>%
  dplyr::filter(response_count <= 3) %>%
  ungroup() %>%
  select(-response_count)

# Reshape the data for ratings
df_reshape <- df_filtered %>%
  tidyr::pivot_longer(cols = starts_with("rating_"), 
               names_to = "Rating", 
               values_to = "Score")

# Filter out specific ratings if needed
df_reshape <- df_reshape %>%
  dplyr::filter(!(Rating %in% c("rating_1", "rating_11")))

# Create a named vector for custom labels
custom_labels <- c(
  rating_2 = "Evelyna Wever-Croes",
  rating_3 = "Geoffrey Wever",
  rating_4 = "Ursell Arends",
  rating_5 = "Xiomara Maduro",
  rating_6 = "Rocco Tjon",
  rating_7 = "Glenbert Croes",
  rating_8 = "Dangui Oduber",
  rating_9 = "Endy Croes",
  rating_10 = "Ady Thijsen"
)

# Calculate means and reorder the Rating factor
mean_order <- df_reshape %>%
  group_by(Rating) %>%
  dplyr::summarise(mean_score = mean(Score, na.rm = TRUE)) %>%
  dplyr::arrange(mean_score) %>%
  pull(Rating)

# Reorder the Rating factor in the filtered dataframe
df_reshape$Rating <- factor(df_reshape$Rating, levels = mean_order)

# Create the violin plot
ggplot(df_reshape, aes(x = Rating, y = Score)) +
  geom_violin(trim = FALSE, fill = "lightblue") +   
  geom_jitter(width = 0.2, alpha = 0.3) +           
  stat_summary(fun = "mean", geom = "point",        
               color = "red", size = 3) +           
  stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 1)),  
               color = "black", vjust = -1.1) +     
  coord_flip() +                                    
  theme_minimal() +                                 
  theme(panel.grid = element_blank()) +             
  labs(title = "Performance Ratings",                           
       y = "",
       x = "") +                                    
  scale_x_discrete(labels = custom_labels)

# Create the violin plot clean version without red dots and number labels
ggplot(df_reshape, aes(x = Rating, y = Score)) +
  geom_violin(trim = FALSE, fill = "lightblue") +   
  geom_jitter(width = 0.2, alpha = 0.3) +           
  coord_flip() +                                    
  theme_minimal() +                                 
  theme(panel.grid = element_blank()) +             
  labs(title = "Performance Ratings",                           
       y = "",
       x = "") +                                    
  scale_x_discrete(labels = custom_labels)



# Calculate the mean scores for each rating and round to one decimal place
rating_summary <- df_reshape %>%
  group_by(Rating) %>%
  dplyr::summarise(Mean_Score = round(mean(Score, na.rm = TRUE), 1)) %>%
  dplyr::arrange(Mean_Score)

# Replace the Rating names with custom labels
rating_summary <- rating_summary %>%
  dplyr::mutate(Rating = custom_labels[as.character(Rating)])

# Display the table
print(rating_summary)
```

```{r}

# Convert 'What.is.your.age.' to numeric and remove NA values
df_filtered <- df_filtered %>%
  dplyr::mutate(What.is.your.age. = as.numeric(as.character(What.is.your.age.))) %>%
  dplyr::filter(!is.na(What.is.your.age.))

# Filter out individuals below 18 years of age
df_filtered <- df_filtered %>%
  dplyr::filter(What.is.your.age. >= 18)

# Create bins for age ranges (e.g., intervals of 5 years), starting at 18
df_filtered <- df_filtered %>%
 dplyr::mutate(age_bins = cut(What.is.your.age., 
                        breaks = seq(18, ceiling(max(What.is.your.age., na.rm = TRUE)) + 5, by = 5), 
                        right = FALSE))

# Calculate the count and percentage for each bin
age_distribution <- df_filtered %>%
  group_by(age_bins) %>%
  dplyr::summarise(Count = n()) %>%
  dplyr::mutate(Percentage = round((Count / sum(Count)) * 100, 1))

# Display the table
print(age_distribution)

# Plot the histogram for ages 18 and above
ggplot(df_filtered, aes(x = What.is.your.age.)) +
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
  labs(title = "Age Distribution (18 and Older)", x = "Age", y = "Frequency") +
  theme_minimal() +
  theme(
    panel.background = element_blank(),  # Remove panel background
    plot.background = element_blank(),   # Remove plot background
    panel.grid = element_blank()         # Remove grid lines
  )

# Calculate gender distribution
gender_distribution <- df_filtered %>%
  group_by(What.is.your.gender) %>%
  dplyr::summarise(Count = n()) %>%
  dplyr::mutate(Percentage = round((Count / sum(Count)) * 100, 1))

# Display the table
print(gender_distribution)

# Create a pie chart with ggplot2
ggplot(gender_distribution, aes(x = "", y = Count, fill = What.is.your.gender)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  labs(title = "Gender Distribution", fill = "Gender") +
  theme_void() +  # Remove background elements
  theme(
    plot.background = element_blank(),  # Remove plot background
    panel.background = element_blank(), # Remove panel background
    legend.title = element_text(size = 12),  # Customize legend title size
    legend.text = element_text(size = 10)    # Customize legend text size
  )



# Calculate the mean scores for each rating, round to one decimal place, and sort in descending order
rating_summary <- df_reshape %>%
  group_by(Rating) %>%
  dplyr::summarise(Mean_Score = round(mean(Score, na.rm = TRUE), 1)) %>%
  dplyr::arrange(desc(Mean_Score))

# Replace the Rating names with custom labels
rating_summary <- rating_summary %>%
  dplyr::mutate(Rating = custom_labels[as.character(Rating)])

# Display the table
print(rating_summary)
```
```{r}
# Calculate the percentage share of responses
vote_likelihood_table <- df_filtered %>%
  dplyr::count(How.likely.are.you.to.vote.in.the.upcoming.election.) %>%
  dplyr::mutate(Percentage = round(n / sum(n) * 100, 1))

# Rename columns for clarity
colnames(vote_likelihood_table) <- c("Likelihood", "Count", "Percentage")

# Display the table
print(vote_likelihood_table)
```
```{r}
# Calculate the percentage share of responses
policy_informed_table <- df_filtered %>%
  dplyr::count(How.informed.do.you.feel.about.the.proposed.policies.of.the.leading.political.parties.) %>%
  dplyr::mutate(Percentage = round(n / sum(n) * 100, 1))

# Rename columns for clarity
colnames(policy_informed_table) <- c("Response", "Count", "Percentage")

# Display the table
print(policy_informed_table)
```

```{r}
# List of columns to analyze with their simplified descriptions
columns_to_analyze <- c(
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Trust.in.party.leadership" = "Trust in party leadership",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Party.s.stance.on.key.issues" = "Party's stance on key issues",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Past.achievements.of.the.party" = "Past achievements of the party",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Party.s.vision.for.the.future" = "Party's vision for the future",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Influence.of.friends.or.peers" = "Influence of friends or peers",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Personal.campaign.promises.and.policies" = "Personal campaign promises and policies",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Endorsements.from.trusted.figures" = "Endorsements from trusted figures",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Media.coverage.and.representation" = "Media coverage and representation",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Participation.in.party.activities" = "Participation in party activities",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Alignment.with.personal.values" = "Alignment with personal values",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Candidate.s.communication.skills" = "Candidate's communication skills",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Influence.of.social.media" = "Influence of social media",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Ease.of.access.to.party.information" = "Ease of access to party information",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Perceived.integrity.of.the.party" = "Perceived integrity of the party",
  "What.are.the.most.important.factors.influencing.your.decision...Select.up.to.5.....Experience.level.of.candidates" = "Experience level of candidates"
)

# Create a summary table for all columns and merge into one table
summary_table <- lapply(names(columns_to_analyze), function(col) {
  df_filtered %>%
    dplyr::count(!!sym(col)) %>%
    dplyr::mutate(
      Percentage = round(n / sum(n) * 100, 1),
      Description = columns_to_analyze[col]
    ) %>%
    dplyr::select(Description, !!sym(col), Percentage) %>%
    dplyr::rename(Response = !!sym(col))
}) %>%
  bind_rows() %>%
  # Filter out rows with blank responses
  dplyr::filter(Response != "") %>%
  # Arrange by percentage in descending order
  dplyr::arrange(desc(Percentage))

# Display the compressed summary table
print(summary_table)
```

```{r}
# Calculate the percentage table for the question and rank by percentage
motivation_table <- df_filtered %>%
  dplyr::filter(!is.na(What.is.your.primary.motivation.for.voting.in.elections.)) %>%
  dplyr::count(What.is.your.primary.motivation.for.voting.in.elections., name = "Count") %>%
  dplyr::mutate(Percentage = round(Count / sum(Count) * 100, 1)) %>%
  dplyr::rename(Response = What.is.your.primary.motivation.for.voting.in.elections.) %>%
  dplyr::arrange(desc(Percentage)) # Rank from largest to smallest

# Print the ranked table
print(motivation_table)

# Display the ranked table with percentages
library(knitr)
library(kableExtra)

motivation_table %>%
  kbl(caption = "Primary Motivation for Voting in Elections (Ranked)") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
```

```{r}
# Calculate percentages for "Are.you.planning.to.vote.for.the.same.party.as.you.did.last.time."
vote_same_party_summary <- df_filtered %>%
  dplyr::count(Are.you.planning.to.vote.for.the.same.party.as.you.did.last.time.) %>%
  dplyr::mutate(Percentage = round(n / sum(n) * 100, 1)) %>%
  dplyr::rename(Response = Are.you.planning.to.vote.for.the.same.party.as.you.did.last.time.) %>%
  arrange(desc(Percentage))

# Display the summary table
print(vote_same_party_summary)
```


```{r}
# Calculate the percentage table for the question and rank by percentage
motivation_table <- df_filtered %>%
  dplyr::filter(!is.na(What.is.your.biggest.concern.about.the.upcoming.election.)) %>%
  dplyr::count(What.is.your.biggest.concern.about.the.upcoming.election., name = "Count") %>%
  dplyr::mutate(Percentage = round(Count / sum(Count) * 100, 1)) %>%
  dplyr::rename(Response = What.is.your.biggest.concern.about.the.upcoming.election.) %>%
  dplyr::arrange(desc(Percentage)) # Rank from largest to smallest

# Print the ranked table
print(motivation_table)

# Display the ranked table with percentages
library(knitr)
library(kableExtra)

motivation_table %>%
  kbl(caption = "Bigges concern about the upcoming election (Ranked)") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
```


```{r}
# List of variables to analyze
variables_to_analyze <- c(
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Policy.positions",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Experience.and.qualifications",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Personal.integrity",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Community.involvement",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Party.affiliation",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Charisma.and.communication.skills",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....Popularity",
  "What.factors.are.most.important.to.you.when.choosing.a.candidate...Select.up.to.3.....In.my.personal.network"
)

# Total respondents in the dataset
total_respondents <- nrow(df_filtered)

# Summarize responses with accurate percentages
summary_table <- lapply(variables_to_analyze, function(var) {
  df_filtered %>%
    dplyr::filter(!is.na(.data[[var]]) & .data[[var]] != "") %>%  # Exclude NA and blank responses
    dplyr::count(Response = .data[[var]], name = "Count") %>%  # Count each response
    dplyr::mutate(
      Variable = var,
      Total_Respondents = total_respondents,  # Total respondents
      Percentage = round(Count / total_respondents * 100, 1)  # Calculate percentage of total respondents
    ) %>%
    dplyr::select(Variable, Response, Count, Percentage)  # Arrange columns
}) %>%
  bind_rows()

# Rank the responses from most frequent to least frequent across all variables
ranked_summary <- summary_table %>%
  arrange(desc(Percentage), Variable)

# View the ranked table
print(ranked_summary)
```

```{r}
# List of variables to analyze
variables_to_analyze <- c(
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Social.media",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....News.outlets",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Community.events",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Word.of.mouth",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Official.party.publications",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Political.debate",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Political.party.website",
  "How.do.you.typically.gather.information.about.the.candidates.and.their.policies.....Own.research"
)

# Total respondents in the dataset
total_respondents <- nrow(df_filtered)

# Summarize responses with accurate percentages
summary_table <- lapply(variables_to_analyze, function(var) {
  df_filtered %>%
    dplyr::filter(!is.na(.data[[var]]) & .data[[var]] != "") %>%  # Exclude NA and blank responses
    dplyr::count(Response = .data[[var]], name = "Count") %>%  # Count each response
    dplyr::mutate(
      Variable = var,
      Total_Respondents = total_respondents,  # Total respondents
      Percentage = round(Count / total_respondents * 100, 1)  # Calculate percentage of total respondents
    ) %>%
    dplyr::select(Variable, Response, Count, Percentage)  # Arrange columns
}) %>%
  bind_rows()

# Rank the responses from most frequent to least frequent across all variables
ranked_summary <- summary_table %>%
  arrange(desc(Percentage), Variable)

# View the ranked table
print(ranked_summary)
```




```{r}
GAC_Straatnamen <- read.csv("C:/Users/Rendell CE/OneDrive - Cornerstone Economics/Lovely Data/Opinion di pueblo/GAC_Straatnamen.csv")

combined_data <- df_filtered %>%
  left_join(GAC_Straatnamen, by = c("On.which.street.do.you.reside." = "Straatnaam"))


# Define the mapping of numeric codes to labels
region_labels <- c(
  "1" = "Noord/Tanki Leendert",
  "2" = "Oranjestad West",
  "3" = "Oranjestad Oost",
  "4" = "Paradera",
  "5" = "Santa Cruz",
  "6" = "Savaneta",
  "7" = "San Nicolas",
  "8" = "San Nicolas"
)

# Replace numeric codes with labels in the data
combined_data <- combined_data %>%
  dplyr::mutate(Regio = factor(Regio, levels = names(region_labels), labels = region_labels))

# Exclude NA values and calculate percentage share for each region
region_summary <- combined_data %>%
  dplyr::filter(!is.na(Regio)) %>%  # Exclude rows with NA in Regio
  dplyr::group_by(Regio) %>%
  dplyr::summarise(Count = n()) %>%
  dplyr::mutate(Percentage = round((Count / sum(Count)) * 100, 1))  # Limit percentage to 1 decimal place

# Display the summary table
region_summary
```

# Shapefile
```{r, eval=FALSE, include=FALSE}
temp_shapefile <- tempfile()
download.file("https://github.com/rendell/futura/raw/main/GAC_Regios_WGS1984.zip", temp_shapefile)
unzip(temp_shapefile)

shape<- st_read("GAC_Regios_WGS1984.shp")
#To add the regions by colour
shape$region<- c("#fc8b9b","#ffffff","#ffffff","#ffffff","#ffffff","#F6BC65","#F6BC65","#ffffff")
#plot
ggplot() + 
geom_sf(data = shape, size = 0.1, color = "black", fill = shape$region) + 
coord_sf() + theme(panel.background = element_blank(),
                   axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
                   )
```


#Actual mapping

```{r, eval=FALSE}
# extract map
library(ggmap)

# maptype = c("terrain",
#  "terrain-background", "terrain-labels", "terrain-lines", "toner",
#  "toner-2010", "toner-2011", "toner-background", "toner-hybrid",
#  "toner-labels", "toner-lines", "toner-lite", "watercolor")

aruba <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-lite")

aruba1 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-background")

aruba2 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "terrain-background")

aruba3 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "terrain-labels")

aruba4 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "terrain-lines")

aruba5 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner")

aruba6 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-2010")

aruba7 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-2011")

aruba8 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-hybrid")

aruba9 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-labels")

aruba10 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "toner-lines")

aruba11 <- get_stamenmap(bbox = c(left = -70.175131, 
                                    bottom = 12.40446, 
                                    right = -69.79788, 
                                    top = 12.63056),
                           zoom = 12, 
                           maptype = "watercolor")
```
